
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import javax.swing.Action;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTextArea;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.event.CaretEvent;
import javax.swing.event.CaretListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.event.UndoableEditListener;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.html.HTML;
import javax.swing.undo.CannotRedoException;
import javax.swing.undo.UndoManager;
import org.fife.ui.rsyntaxtextarea.*;
import org.fife.ui.rtextarea.*;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author dell
 */
public class FrontFrame extends javax.swing.JFrame implements Runnable{

    /**
     * Creates new form FrontFrame
     */
    //JTabbedPane tabbedPane;
    MyTextArea myta;
    ActionEvent event;
    protected UndoManager undoManager;
    String currentFilePath,currentFileName;
    public FrontFrame() {
               
        initComponents();
        //RSyntaxTextArea ta = new RSyntaxTextArea();
        currentFileName = "untitled";
        PrintStream out = new PrintStream( new TextAreaOutputStream( jTextArea2 ));
        InputStream in = new BufferedInputStream(new TextAreaInputStream(jTextArea1));
        System.setOut( out );
        System.setErr( out );
        System.setIn(in);
        jTextArea2.setEditable(false);
        int screenWidth,screenHeight;
        Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
        screenWidth = (int) d.getWidth();
        screenHeight = (int) d.getHeight()-40;
        setSize(screenWidth,screenHeight);
        setTitle("JCC IDE");
        ImageIcon img = new ImageIcon("D:\\ide.png");
        setIconImage(img.getImage());
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        new ResizableTabbedPane(jScrollPane1,jTabbedPane2);
        //new ResizableTabbedPane(jScrollPane1,jTabbedPane2);
        cutinmenu = new JMenuItem(new DefaultEditorKit.CutAction());
        //cutinmenu.setMnemonic(KeyEvent.VK_T);
        copyinmenu = new JMenuItem(new DefaultEditorKit.CopyAction());
        //copyinmenu.setMnemonic(KeyEvent.VK_C);
        pasteinmenu = new JMenuItem(new DefaultEditorKit.PasteAction());
        //pasteinmenu.setMnemonic(KeyEvent.VK_P);
        try
        {
          UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
           SwingUtilities.updateComponentTreeUI(this);
        }
        catch(Exception e)
        {
           System.out.println(e);
        }
        newFileinmenuActionPerformed(event);
        myta.addCaretListener(new MyCaretListener());
        Thread th = new Thread(this);
        th.start();
    }
    
    //thread for calculating cursor position at any time
    public void run(){
        while(true){
        int lineno = myta.getCaretLineNumber()+1;
        int colno = myta.getCaretOffsetFromLineStart();
        
        String labeltext = "line : "+lineno + ", col : "+ colno +"";
        statusbar.setText(labeltext);
    }
    }
    class MyCaretListener implements CaretListener
    {

        @Override
        public void caretUpdate(CaretEvent e) {
            //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
           
        }
        
    }
	
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        newFile = new javax.swing.JButton();
        openFile = new javax.swing.JButton();
        saveFile = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTextPane1 = new javax.swing.JTextPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jToolBar2 = new javax.swing.JToolBar();
        undo = new javax.swing.JButton();
        redo = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        statusbar = new javax.swing.JLabel();
        showtime = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        newFileinmenu = new javax.swing.JMenuItem();
        openFileinmenu = new javax.swing.JMenuItem();
        saveFileinmenu = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();
        jMenuItem6 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem7 = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        undoinmenu = new javax.swing.JMenuItem();
        redoinmenu = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        cutinmenu = new javax.swing.JMenuItem();
        copyinmenu = new javax.swing.JMenuItem();
        pasteinmenu = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        jMenuItem13 = new javax.swing.JMenuItem();
        jMenuItem14 = new javax.swing.JMenuItem();
        jSeparator5 = new javax.swing.JPopupMenu.Separator();
        jMenuItem18 = new javax.swing.JMenuItem();
        view = new javax.swing.JMenu();
        run = new javax.swing.JMenu();
        compile = new javax.swing.JMenu();
        compileC = new javax.swing.JMenuItem();
        compileCplus = new javax.swing.JMenuItem();
        compileJAVA = new javax.swing.JMenuItem();
        runCode = new javax.swing.JMenu();
        runC = new javax.swing.JMenuItem();
        runCplus = new javax.swing.JMenuItem();
        runJAVA = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        newFile.setForeground(new java.awt.Color(255, 51, 51));
        newFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        newFile.setFocusable(false);
        newFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newFile.setMargin(new java.awt.Insets(2, 16, 2, 14));
        newFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        jToolBar1.add(newFile);

        openFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        openFile.setFocusable(false);
        openFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openFile.setMargin(new java.awt.Insets(2, 16, 2, 14));
        openFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        jToolBar1.add(openFile);

        saveFile.setText("Save");
        saveFile.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        saveFile.setFocusable(false);
        saveFile.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveFile.setMargin(new java.awt.Insets(2, 16, 2, 14));
        saveFile.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });
        jToolBar1.add(saveFile);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder("Navigator"));

        jTextPane1.setEditable(false);
        jScrollPane4.setViewportView(jTextPane1);

        jTabbedPane1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.N_RESIZE_CURSOR));

        jTabbedPane2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jTabbedPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.N_RESIZE_CURSOR));

        jScrollPane1.setBorder(null);
        jScrollPane1.setAutoscrolls(true);
        jScrollPane1.setCursor(new java.awt.Cursor(java.awt.Cursor.N_RESIZE_CURSOR));

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jTabbedPane2.addTab("input", jScrollPane1);

        jScrollPane2.setBorder(null);
        jScrollPane2.setCursor(new java.awt.Cursor(java.awt.Cursor.N_RESIZE_CURSOR));

        jTextArea2.setColumns(20);
        jTextArea2.setRows(5);
        jTextArea2.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane2.setViewportView(jTextArea2);

        jTabbedPane2.addTab("output", jScrollPane2);

        jToolBar2.setRollover(true);

        undo.setText("Undo");
        undo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        undo.setFocusable(false);
        undo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        undo.setMargin(new java.awt.Insets(2, 18, 2, 14));
        undo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        jToolBar2.add(undo);

        redo.setText("Redo");
        redo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        redo.setFocusable(false);
        redo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        redo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        jToolBar2.add(redo);

        jButton6.setText("Run");
        jButton6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setMargin(new java.awt.Insets(2, 18, 2, 14));
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jButton6);

        statusbar.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N

        showtime.setFont(new java.awt.Font("Tahoma", 3, 11)); // NOI18N
        showtime.setForeground(new java.awt.Color(255, 51, 102));

        file.setText("File");
        file.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        file.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileActionPerformed(evt);
            }
        });

        newFileinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        newFileinmenu.setText("New");
        newFileinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileinmenuActionPerformed(evt);
            }
        });
        file.add(newFileinmenu);

        openFileinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        openFileinmenu.setText("Open");
        openFileinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileinmenuActionPerformed(evt);
            }
        });
        file.add(openFileinmenu);

        saveFileinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        saveFileinmenu.setText("Save");
        saveFileinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileinmenuActionPerformed(evt);
            }
        });
        file.add(saveFileinmenu);

        jMenuItem4.setText("Save as...");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        file.add(jMenuItem4);
        file.add(jSeparator1);

        jMenuItem5.setText("Page setup...");
        file.add(jMenuItem5);

        jMenuItem6.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem6.setText("Print...");
        file.add(jMenuItem6);
        file.add(jSeparator2);

        jMenuItem7.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem7.setText("Exit...");
        file.add(jMenuItem7);

        jMenuBar1.add(file);

        edit.setText("Edit");
        edit.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        undoinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        undoinmenu.setText("Undo");
        undoinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoinmenuActionPerformed(evt);
            }
        });
        edit.add(undoinmenu);

        redoinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        redoinmenu.setText("Redo");
        redoinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoinmenuActionPerformed(evt);
            }
        });
        edit.add(redoinmenu);
        edit.add(jSeparator3);

        cutinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        cutinmenu.setText("Cut");
        cutinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutinmenuActionPerformed(evt);
            }
        });
        edit.add(cutinmenu);

        copyinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        copyinmenu.setText("Copy");
        copyinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyinmenuActionPerformed(evt);
            }
        });
        edit.add(copyinmenu);

        pasteinmenu.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        pasteinmenu.setText("Paste");
        pasteinmenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteinmenuActionPerformed(evt);
            }
        });
        edit.add(pasteinmenu);
        edit.add(jSeparator4);

        jMenuItem13.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem13.setText("Find...");
        edit.add(jMenuItem13);

        jMenuItem14.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem14.setText("Replace");
        edit.add(jMenuItem14);
        edit.add(jSeparator5);

        jMenuItem18.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem18.setText("Select All");
        edit.add(jMenuItem18);

        jMenuBar1.add(edit);

        view.setText("View");
        view.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenuBar1.add(view);

        run.setText("Run");
        run.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        compile.setText("Compile");

        compileC.setText("C");
        compileC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileCActionPerformed(evt);
            }
        });
        compile.add(compileC);

        compileCplus.setText("C++");
        compileCplus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileCplusActionPerformed(evt);
            }
        });
        compile.add(compileCplus);

        compileJAVA.setText("JAVA");
        compileJAVA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                compileJAVAActionPerformed(evt);
            }
        });
        compile.add(compileJAVA);

        run.add(compile);

        runCode.setText("Run");

        runC.setText("C");
        runC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCActionPerformed(evt);
            }
        });
        runCode.add(runC);

        runCplus.setText("C++");
        runCplus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runCplusActionPerformed(evt);
            }
        });
        runCode.add(runCplus);

        runJAVA.setText("JAVA");
        runJAVA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runJAVAActionPerformed(evt);
            }
        });
        runCode.add(runJAVA);

        run.add(runCode);

        jMenuBar1.add(run);

        help.setText("Help");
        help.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addComponent(jTabbedPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 424, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(showtime, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusbar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(statusbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showtime, javax.swing.GroupLayout.DEFAULT_SIZE, 23, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void pasteinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteinmenuActionPerformed
        // TODO add your handling code here:
        Action paste = new DefaultEditorKit.PasteAction();
        paste.putValue(Action.NAME, "Paste");
        paste.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control V"));
        
       
    }//GEN-LAST:event_pasteinmenuActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        // TODO add your handling code here:
        openFileinmenuActionPerformed(evt);
    }//GEN-LAST:event_openFileActionPerformed
    /*static void add(JTabbedPane tabbedPane) {
    int count = tabbedPane.getTabCount();
    JButton button = new JButton();
    tabbedPane.addTab("new tab",button);
  }*/
    
   
    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        
        newFileinmenuActionPerformed(evt);
			
    }//GEN-LAST:event_newFileActionPerformed
    
    private void newFileinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileinmenuActionPerformed
        MyTextArea textArea = new MyTextArea();
        this.myta = textArea;
        textArea.addMethods();
        undoManager = textArea.getUndoManager();
        TextLineNumber textLineNumber = new TextLineNumber(textArea);
        JScrollPane scrollPane = new JScrollPane(textArea);
        scrollPane.setRowHeaderView(textLineNumber);
        jTabbedPane1.setUI(new CustomTabbedPaneUI());
        jTabbedPane1.add("untitled",scrollPane);
        new ResizableTabbedPane(scrollPane,jTabbedPane1);
        //String text = textArea.getString();
            textArea.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                
            }

            @Override
            public void keyPressed(KeyEvent e) {
               // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyReleased(KeyEvent e) {
               
                text=textArea.getText();
            }
        });
        
    }//GEN-LAST:event_newFileinmenuActionPerformed
    String text="";
    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        // TODO add your handling code here:
        redoinmenuActionPerformed(evt);
    }//GEN-LAST:event_redoActionPerformed
 
    private void openFileinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileinmenuActionPerformed
        // TODO add your handling code here:
        
        JFileChooser fileChooser = new JFileChooser();
        MyTextArea textArea = new MyTextArea();
        this.myta = textArea;
        textArea.addMethods();
        textArea.setCodeFoldingEnabled(true);
        //textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_C);
        undoManager = textArea.getUndoManager();
        TextLineNumber textLineNumber = new TextLineNumber(textArea);
        JScrollPane scrollPane = new JScrollPane(textArea);
        //RTextScrollPane scrollPane = new RTextScrollPane(textArea);
        scrollPane.setRowHeaderView(textLineNumber);
        int approve = fileChooser.showOpenDialog(this);
        if(approve == JFileChooser.APPROVE_OPTION)
        {
            
            File file = fileChooser.getSelectedFile();
            currentFilePath = file.getPath();
            currentFileName = file.getName();
            String filePath = file.getPath();
            String fileName = file.getName();
            jTabbedPane1.setUI(new CustomTabbedPaneUI());
            jTabbedPane1.add(fileName,scrollPane);
            if(currentFileName.endsWith(".c"))
            {
               textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_C);
            }
            else if(currentFileName.endsWith(".cpp"))
            {
               textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS);
            }
            else if(currentFileName.endsWith(".java"))
            {
               textArea.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
            }
            try
            {
                BufferedReader br = new BufferedReader(new FileReader(filePath));
                String s1 = "", s2 = "";
                while((s1=br.readLine())!=null)
                {
                    s2 += s1+"\n";
                }
                textArea.setText(s2);
            }
            catch(Exception e)
            {
                System.out.println(e);
            }
            textArea.addKeyListener(new KeyListener() {

            @Override
            public void keyTyped(KeyEvent e) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                
            }

            @Override
            public void keyPressed(KeyEvent e) {
               // throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void keyReleased(KeyEvent e) {
               
                text=textArea.getText();
            }
        });
        }
        //String text = textArea.getString();
    }//GEN-LAST:event_openFileinmenuActionPerformed
    
    private void saveFileinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileinmenuActionPerformed
        // TODO add your handling code here:
        
        String str="";
        File file;
        JFileChooser fileChooser = new JFileChooser();
        int ret = fileChooser.showSaveDialog(this);
        try
        {
            
            file = fileChooser.getSelectedFile();
            str = file.getName();
            currentFilePath = file.getPath();
            currentFileName = file.getName();
         if((ret == JFileChooser.APPROVE_OPTION))
         {
           if(!(file.exists())){
            try
            {
              file.createNewFile();
            }
            catch(Exception e){}
           }
           else
           {
            int confirmation = JOptionPane.showConfirmDialog(this, str+" already exists.\nDo you want to replace it?","Save",JOptionPane.YES_NO_OPTION,JOptionPane.WARNING_MESSAGE);
            if(confirmation == 1)
            {
                //System.out.println("Joption: No");
                return;
            }
            else if(confirmation == 0)
            {
                //System.out.println("Joption: YES");
                FileOutputStream outputStream = new FileOutputStream(file);
                outputStream.write(text.getBytes());
            }
           }
         }
         else if(ret == JFileChooser.CANCEL_OPTION)
         {
             return;
         }
          FileOutputStream outputStream = new FileOutputStream(file);
          outputStream.write(text.getBytes());
          if(currentFileName.endsWith(".c"))
          {
              myta.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_C);
          }
          else if(currentFileName.endsWith(".cpp"))
          {
              myta.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_CPLUSPLUS);
          }
          else if(currentFileName.endsWith(".java"))
          {
              myta.setSyntaxEditingStyle(SyntaxConstants.SYNTAX_STYLE_JAVA);
          }
        }
        catch(Exception e){}
        
    }//GEN-LAST:event_saveFileinmenuActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        // TODO add your handling code here:
        saveFileinmenuActionPerformed(evt);
    }//GEN-LAST:event_saveFileActionPerformed

    private void undoinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoinmenuActionPerformed
        // TODO add your handling code here:
        try {
          undoManager.undo();
        } catch (CannotRedoException cre) {
          cre.printStackTrace();
        }

    }//GEN-LAST:event_undoinmenuActionPerformed

    private void redoinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoinmenuActionPerformed
        // TODO add your handling code here:
        try {
          undoManager.redo();
        } catch (CannotRedoException cre) {
          cre.printStackTrace();
        }

    }//GEN-LAST:event_redoinmenuActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        // TODO add your handling code here:
        undoinmenuActionPerformed(evt);        
    }//GEN-LAST:event_undoActionPerformed

    private void cutinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutinmenuActionPerformed
        // TODO add your handling code here:
         Action cut = new DefaultEditorKit.CutAction();
        cut.putValue(Action.NAME, "Cu");
        cut.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control X"));
       
    }//GEN-LAST:event_cutinmenuActionPerformed

    private void copyinmenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyinmenuActionPerformed
        // TODO add your handling code here:
        Action copy = new DefaultEditorKit.CopyAction();
        copy.putValue(Action.NAME, "Copy");
        copy.putValue(Action.ACCELERATOR_KEY, KeyStroke.getKeyStroke("control Y"));
       
    }//GEN-LAST:event_copyinmenuActionPerformed
   String input = "";
    private void runJAVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runJAVAActionPerformed
        // TODO add your handling code here:
        try
        {
            jTextArea2.setText("");
             String st = currentFilePath.substring(0,currentFilePath.length()-5);
              int l = currentFilePath.lastIndexOf('\\');
             String str = currentFilePath.substring(0,l);
             String runthis = "java -cp " + str +" "+currentFileName.substring(0,currentFileName.length()-5);
             input = jTextArea1.getText();
             process = runtime.exec(runthis);
            new OutputDisplayer(process,input);
                //process.waitFor();
            System.out.println("run successfully");
        }
        catch(Exception e)
        {
            System.out.println(e);
        }
    }//GEN-LAST:event_runJAVAActionPerformed
    Runtime runtime = Runtime.getRuntime();  
    Process process;
    InputStream inputStream;
    InputStreamReader inputReader;
    BufferedReader bufferedReader;
    long starttime,endtime,totaltime;
    private void compileCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileCActionPerformed
        // TODO add your handling code here:
        if(currentFileName.equals("untitled"))
        {
          int conf = JOptionPane.showConfirmDialog(this, "save this file first.", "Unsaved File", JOptionPane.OK_CANCEL_OPTION);
          
          if(conf == 0)
              saveFileinmenuActionPerformed(event);
          else
              return;
        }
        else if(!currentFileName.endsWith(".c"))
        {
            JOptionPane.showMessageDialog(this, "can't compile because this is not C file", "Error in compiling file", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
        try
        {
            input = jTextArea1.getText();
            starttime = System.currentTimeMillis();
            process = runtime.exec("gcc "+currentFilePath+" -o "+currentFilePath.substring(0,currentFilePath.length()-1)+"exe");
            new OutputDisplayer(process,input);
            process.waitFor();
            endtime = System.currentTimeMillis();
            totaltime = endtime - starttime;
            showtime.setText("complation time : " + totaltime+" milisec.");
            System.out.println("compiled successfully");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_compileCActionPerformed

    private void compileCplusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileCplusActionPerformed
        // TODO add your handling code here:
        if(currentFileName.equals("untitled"))
        {
          int conf = JOptionPane.showConfirmDialog(this, "save this file first.", "Unsaved File", JOptionPane.OK_CANCEL_OPTION);
          
          if(conf == 0)
              saveFileinmenuActionPerformed(event);
          else
              return;
        }
        else if(!currentFileName.endsWith(".cpp"))
        {
            JOptionPane.showMessageDialog(this, "can't compile because this is not C++ file", "Error in compiling file", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
        try
        {
            input = jTextArea1.getText();
            starttime = System.currentTimeMillis();
            process = runtime.exec("g++ "+currentFilePath+" -o "+currentFilePath.substring(0,currentFilePath.length()-1)+"exe");
            
            new OutputDisplayer(process,input);
            process.waitFor();
            endtime = System.currentTimeMillis();
            totaltime = endtime - starttime;
            showtime.setText("complation time : " + totaltime+" milisec.");
            System.out.println("compiled successfully");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_compileCplusActionPerformed

    private void compileJAVAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_compileJAVAActionPerformed
        // TODO add your handling code here:
        if(currentFileName.equals("untitled"))
        {
          int conf = JOptionPane.showConfirmDialog(this, "save this file first.", "Unsaved File", JOptionPane.OK_CANCEL_OPTION);
          
          if(conf == 0)
              saveFileinmenuActionPerformed(event);
          else
              return;
        }
        else if(!currentFileName.endsWith(".java"))
        {
            JOptionPane.showMessageDialog(this, "can't compile because this is not JAVA file", "Error in compiling file", JOptionPane.ERROR_MESSAGE);
        }
        else
        {
        try
        {
            input = jTextArea1.getText();
            starttime = System.currentTimeMillis();
            process = runtime.exec("javac "+currentFilePath);
            //new InputDisplayer(process, input);
            new OutputDisplayer(process,input);
            process.waitFor();
               endtime = System.currentTimeMillis();
            totaltime = endtime - starttime;
            showtime.setText("complation time : " + totaltime+" milisec.");
            //System.out.println("compiled successfully");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        }
    }//GEN-LAST:event_compileJAVAActionPerformed

    private void runCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCActionPerformed
        // TODO add your handling code here:
        try
        {
            jTextArea2.setText("");
            process = runtime.exec(currentFilePath.substring(0,currentFilePath.length()-1)+"exe");
            new OutputDisplayer(process);
            process.waitFor();
              
            System.out.println("run successfully");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_runCActionPerformed

    private void runCplusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runCplusActionPerformed
        // TODO add your handling code here:
        try
        {
            jTextArea2.setText("");
            process = runtime.exec(currentFilePath.substring(0,currentFilePath.length()-1)+"exe");
            new OutputDisplayer(process);
            process.waitFor();
             System.out.println("run successfully");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_runCplusActionPerformed

    private void fileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrontFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrontFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrontFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrontFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrontFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu compile;
    private javax.swing.JMenuItem compileC;
    private javax.swing.JMenuItem compileCplus;
    private javax.swing.JMenuItem compileJAVA;
    private javax.swing.JMenuItem copyinmenu;
    private javax.swing.JMenuItem cutinmenu;
    private javax.swing.JMenu edit;
    private javax.swing.JMenu file;
    private javax.swing.JMenu help;
    private javax.swing.JButton jButton6;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem13;
    private javax.swing.JMenuItem jMenuItem14;
    private javax.swing.JMenuItem jMenuItem18;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JMenuItem jMenuItem6;
    private javax.swing.JMenuItem jMenuItem7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JPopupMenu.Separator jSeparator5;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextPane jTextPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JButton newFile;
    private javax.swing.JMenuItem newFileinmenu;
    private javax.swing.JButton openFile;
    private javax.swing.JMenuItem openFileinmenu;
    private javax.swing.JMenuItem pasteinmenu;
    private javax.swing.JButton redo;
    private javax.swing.JMenuItem redoinmenu;
    private javax.swing.JMenu run;
    private javax.swing.JMenuItem runC;
    private javax.swing.JMenu runCode;
    private javax.swing.JMenuItem runCplus;
    private javax.swing.JMenuItem runJAVA;
    private javax.swing.JButton saveFile;
    private javax.swing.JMenuItem saveFileinmenu;
    private javax.swing.JLabel showtime;
    private javax.swing.JLabel statusbar;
    private javax.swing.JButton undo;
    private javax.swing.JMenuItem undoinmenu;
    private javax.swing.JMenu view;
    // End of variables declaration//GEN-END:variables
}
